import { Injectable } from '@nestjs/common';
import { Action, Ctx, Update } from 'nestjs-telegraf';
import { Context, Markup } from 'telegraf';
import * as fs from 'fs';
import { PrismaService } from '../../../prisma/prisma.service';
import { TelegramBotUtils } from '../../telegram-bot.utils';
import { UserService } from '../../../user/user.service';
import { PinoLogger } from 'nestjs-pino';
import { join } from 'path';
import { createWriteStream } from 'fs';
import archiver from 'archiver';
import { VpnForSmartTv } from '../../text&buttons/text&buttons';

@Injectable()
@Update()
export class SmartTvFileHandler {
  constructor(
    private readonly logger: PinoLogger,
    private readonly prisma: PrismaService,
    private readonly botUtils: TelegramBotUtils,
    private readonly userService: UserService,
  ) {
    this.logger.setContext(SmartTvFileHandler.name);
  }

  @Action(/^get_smartTv_file:(\d+)$/)
  async handleGetSmartTvFile(@Ctx() ctx: Context) {
    await ctx.deleteMessage();
    const user = await this.userService.getUserByTgId(ctx.from.id);
    this.logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${user.id} –∑–∞—à–µ–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN –Ω–∞ smart TV`);
    const region = await this.botUtils.getRegion(ctx);

    if (!region) {
      this.logger.info(`–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${user.id} –Ω–µ –≤—ã–±—Ä–∞–Ω —Ä–µ–≥–∏–æ–Ω`);
      await ctx.editMessageText(VpnForSmartTv.noRegionText(), VpnForSmartTv.noRegionKeyboard());
      return;
    }

    const smartTvVpnKey = await this.prisma.vpn_keys.findFirst({
      where: {
        user_id: user.id,
        region_id: region.id,
      },
    });

    if (!smartTvVpnKey) {
      this.logger.info(`–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${user.id} –Ω–µ –≤—ã–±—Ä–∞–Ω –Ω–∞–π–¥–µ–Ω VPN –∫–ª—é—á `);
      await ctx.editMessageText(VpnForSmartTv.noVpnKeyText(), VpnForSmartTv.noVpnKeyKeyboard());
      return;
    }

    const jsonFilePath = await this.botUtils.convertOutlineToJson(smartTvVpnKey.key, user.id);
    this.logger.info(`–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${user.id}`);
    if (!fs.existsSync(jsonFilePath)) {
      await ctx.editMessageText('–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${user.id}`);
      return;
    }
    const projectFilesPath = join(process.cwd(), 'src', 'telegram-bot', 'handlers', 'VPN', 'files');

    const filesToArchive = [
      { path: jsonFilePath, name: 'config.json' },
      { path: join(projectFilesPath, 'Shadowsocks.apk'), name: 'Shadowsocks.apk' },
      { path: join(projectFilesPath, 'TV-File-Commander.apk'), name: 'TV-File-Commander.apk' },
    ];
    const tempPath = join(process.cwd(), 'src', 'telegram-bot', 'handlers', 'VPN', 'temp');
    if (!fs.existsSync(tempPath)) {
      fs.mkdirSync(tempPath, { recursive: true });
    }
    const archivePath = join(
      process.cwd(),
      'src',
      'telegram-bot',
      'handlers',
      'VPN',
      'temp',
      `config_${user.id}.zip`,
    );
    const gif = `https://tenor.com/ru/view/loading-drooling-gif-26007842`;
    const animationMessage = await ctx.replyWithAnimation(gif, {
      caption: 'üîÑ –°–æ–∑–¥–∞—ë–º –∞—Ä—Ö–∏–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...',
    });

    const archiveStream = createWriteStream(archivePath);
    const archive = archiver('zip', { zlib: { level: 9 } });

    archive.pipe(archiveStream);

    for (const file of filesToArchive) {
      if (fs.existsSync(file.path)) {
        archive.file(file.path, { name: file.name });
      } else {
        this.logger.warn(`–§–∞–π–ª ${file.path} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞—Ä—Ö–∏–≤`);
      }
    }

    await archive.finalize();
    try {
      await ctx.replyWithDocument(
        { source: archivePath },
        { caption: '–í–∞—à VPN –∫–ª—é—á –∏ APK —Ñ–∞–π–ª—ã –¥–ª—è Smart TV' },
      );

      if (fs.existsSync(archivePath)) {
        fs.unlinkSync(archivePath);
        fs.unlinkSync(jsonFilePath);
      }
      this.logger.info(`–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);
    } catch (error) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${user.id}, –æ—à–∏–±–∫–∞: ${error.message}`,
      );
      await ctx.editMessageText('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
    await ctx.deleteMessage(animationMessage.message_id);
    await ctx.reply(VpnForSmartTv.endText(region.region_name, region.flag), VpnForSmartTv.endKeyboards());
  }
}
