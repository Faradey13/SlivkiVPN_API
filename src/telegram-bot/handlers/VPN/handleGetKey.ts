import { Injectable } from '@nestjs/common';
import { Action, Ctx, Update } from 'nestjs-telegraf';
import { Context, Markup } from 'telegraf';
import { UserService } from '../../../user/user.service';
import { PrismaService } from '../../../prisma/prisma.service';
import { RegionService } from '../../../region/region.service';
import { PinoLogger } from 'nestjs-pino';

@Injectable()
@Update()
export class GetKeyHandler {
  constructor(
    private readonly userService: UserService,
    private readonly prisma: PrismaService,
    private readonly region: RegionService,
    private readonly logger: PinoLogger,
  ) {
    this.logger.setContext(GetKeyHandler.name);
  }
  @Action('get_key')
  async handleGetKey(@Ctx() ctx: Context) {
    const user = await this.userService.getUserByTgId(ctx.from.id);
    this.logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${user.id} –∑–∞—à–µ–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—É—á–µ–Ω–∏—è VPN –∫–ª—é—á–∞ Outline`);
    const vpnKey = await this.prisma.vpn_keys.findFirst({
      where: { user_id: user.id, is_active: true },
    });
    if (!vpnKey) {
      this.logger.info(`–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${user.id} –Ω–µ—Ç –∫–ª—é—á–∞ VPN`);
      const keyboardNoKey = Markup.inlineKeyboard([
        [Markup.button.callback('üìù –í –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏', 'subscribe')],
        [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')],
      ]);
      const textNoKey = `–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –∫–ª—é—á –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.
        
        –ï—Å–ª–∏ –≤—ã –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É, –Ω–æ –∫–ª—é—á –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        `;
      await ctx.editMessageText(textNoKey, keyboardNoKey);
    }
    const region = await this.region.getRegionById(vpnKey.region_id);
    this.logger.info(`–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${user.id} –µ—Å—Ç—å –∫–ª—é—á VPN ID:${vpnKey.id}`);
    const text = `
–í–∞—à –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á
–†–µ–≥–∏–æ–Ω - ${region.region_name} ${region.flag}

 <code><a href="tg://copy?text=${vpnKey.key}">${vpnKey.key}</a></code>

–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ, –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–ª—é—Å–∏–∫ –≤ –≤–µ—Ä—Ö–Ω–µ–º –ø—Ä–∞–≤–æ–º —É–≥–ª—É.

–î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    `;

    const keyboard = {
      inline_keyboard: [
        [Markup.button.callback('üì± –°–∫–∞—á–∞—Ç—å Outline', 'download_outline')],
        [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')],
      ],
    };

    await ctx.editMessageText(text, {
      parse_mode: 'HTML',
      reply_markup: keyboard,
    });
  }
}
