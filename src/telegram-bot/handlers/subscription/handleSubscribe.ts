import { Injectable } from '@nestjs/common';
import { Action, Ctx, Update } from 'nestjs-telegraf';
import { Context, Markup } from 'telegraf';
import { UserService } from '../../../user/user.service';
import { SubscriptionService } from '../../../subscription/subscription.service';

@Injectable()
@Update()
export class SubscriptionHandler {
  constructor(
    private readonly userService: UserService,
    private readonly subscriptionService: SubscriptionService,
  ) {}
  @Action('subscribe')
  async handleSubscribe(@Ctx() ctx: Context) {
    const user = await this.userService.getUserByTgId(ctx.from.id);

    if (!user) {
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º telegram_id –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const subscription = await this.subscriptionService.getUserSubscription(user.id);

    if (subscription) {
      const today = new Date();
      const subscriptionEnd = subscription.subscription_end.toISOString().split('T')[0];
      const diffInTime = subscription.subscription_end.getTime() - today.getTime();
      const days_left = Math.ceil(diffInTime / (1000 * 60 * 60 * 24));

      const activeSubMenuText = `
üóì –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ ${subscriptionEnd}.

–û—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª-–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: ${days_left} –¥–Ω–µ–π.

üîë –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ ¬´–ì–µ—Ä–º–∞–Ω–∏—è¬ª, 
–Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á'.

üåç –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–ª—é—á –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å 
–∫–Ω–æ–ø–∫–æ–π '–í—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω'.

üîô –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
      `;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'extend_subscription')],
        [Markup.button.callback('üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á', 'get_key')],
        [Markup.button.callback('üåç –í—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω', 'select_region')],
        [Markup.button.callback('üì∫ –ö–ª—é—á –¥–ª—è –°–º–∞—Ä—Ç –¢–í', 'smart_tv_key')],
        [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')],
      ]);

      await ctx.editMessageText(activeSubMenuText, keyboard);
    } else {
      const newSubMenuText = `
–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–ª—é—á—É.

–ï—Å–ª–∏ —Å –≤–∞–º–∏ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏,
–ø–µ—Ä–µ–π–¥—è –≤ —Ä–∞–∑–¥–µ–ª '–£–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥'
      `;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìù –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'extend_subscription')],
        [Markup.button.callback('üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á', 'get_key')],
        [Markup.button.callback('üåç –í—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω', 'select_region')],
        [Markup.button.callback('üì∫ –ö–ª—é—á –¥–ª—è –°–º–∞—Ä—Ç –¢–í', 'smart_tv_key')],
        [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')],
      ]);

      await ctx.editMessageText(newSubMenuText, keyboard);
    }
  }
}
