import { Action, Ctx, Start, Update } from 'nestjs-telegraf';
import { Context, Markup } from 'telegraf';
import { Injectable, UnauthorizedException } from '@nestjs/common';
import { UserService } from '../../user/user.service';
import { PrismaService } from '../../prisma/prisma.service';
import { PinoLogger } from 'nestjs-pino';

@Injectable()
@Update()
export class StartHandler {
  constructor(
    private readonly logger: PinoLogger,
    private readonly userService: UserService,
    private readonly prisma: PrismaService,
  ) {
    this.logger.setContext(StartHandler.name);
  }

  @Start()
  @Action('back_to_menu')
  async handleStart(@Ctx() ctx: Context) {
    const userId = ctx.from.id;
    const nameTg = ctx.from.username;
    const user = await this.userService.getUserByTgId(userId);
    this.logger.info(`–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
    if (!user) {
      this.logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å`);
      try {
        const newUser = await this.userService.createUser({ telegram_user_id: userId });
        await this.prisma.user.update({
          where: { id: newUser.id },
          data: { is_activated: true, telegram_name: nameTg },
        });
        this.logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`);
      } catch (error) {
        this.logger.error(`–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è ${userId} `);
        throw new UnauthorizedException(error.message);
      }
    }

    const startText = `
–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞–¥–µ–∂–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π VPN –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É, —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤!

üìù –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–ø–∏—Å–∫–∞", —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é –∏–ª–∏ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ –∏ –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN.

üé´ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", —Ç—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö.

üéÅ –í —Ä–∞–∑–¥–µ–ª–µ "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞" –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥, –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã–ø–æ–ª—É—á–∞–µ—Ç–µ –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–∏—Å.

‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–º–æ—â—å" ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –º—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –Ω–∏—Ö.
    `;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üìù –ü–æ–¥–ø–∏—Å–∫–∞', 'subscribe')],
      [Markup.button.callback('üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ã', 'promotion')],
      [Markup.button.callback('üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', 'referral')],
      [Markup.button.callback('‚ùì –ü–æ–º–æ—â—å', 'help')],
      [Markup.button.callback('‚ùì test', 'warning_test')],
    ]);

    try {
      await ctx.editMessageText(startText, keyboard);
    } catch {
      await ctx.reply(startText, keyboard);
    }
  }
}
