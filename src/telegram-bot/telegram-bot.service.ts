import { Injectable } from '@nestjs/common';
import { InjectBot } from 'nestjs-telegraf';
import { Context, Markup, Telegraf } from 'telegraf';
import { PrismaService } from '../prisma/prisma.service';
import { UserService } from '../user/user.service';
import { TelegramBotUtils } from './telegram-bot.utils';
import * as fs from 'node:fs';

@Injectable()
export class TelegramBotService {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly prisma: PrismaService,
    private readonly userService: UserService,
    private readonly botUtils: TelegramBotUtils,
  ) {
    this.initCommands();
  }

  private escapeMarkdown(text: string): string {
    return text.replace(/[_*[\]()~`>#+\-=|{}.!]/g, '\\$&');
  }

  private async getRegion(ctx: Context) {
    if (!ctx.callbackQuery || !('data' in ctx.callbackQuery)) {
      return;
    }
    const callbackData = ctx.callbackQuery.data as string;
    const regionId = parseInt(callbackData.split(':')[1]);
    const region = await this.prisma.region.findUnique({ where: { id: regionId } });
    if (regionId === undefined) {
      await ctx.reply('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
      return;
    }
    return region;
  }

  private initCommands() {
    const actions = [
      { action: 'subscribe', handler: this.handleSubscribe.bind(this) },
      { action: 'help', handler: this.handleHelp.bind(this) },
      // { action: 'extend_subscription', handler: this.handleExtendSubscription.bind(this) },
      { action: 'get_key', handler: this.handleGetKey.bind(this) },
      { action: 'smart_tv', handler: this.handleSmartTvRegion.bind(this) },
      { action: 'download_outline', handler: this.handleDownloadOutline.bind(this) },
      { action: 'outline_Mobile', handler: this.handleOutlineMobile.bind(this) },
      { action: 'outline_PC', handler: this.handleOutlinePC.bind(this) },
      // { action: 'enter_ref_code', handler: this.handleEnterRefCode.bind(this) },
      // { action: 'get_ref_code', handler: this.handleGetRefCode.bind(this) },
      // { action: 'referral', handler: this.handleReferral.bind(this) },
      { action: 'change_region', handler: this.handleChangeRegion.bind(this) },
      { action: 'get_vpn_key', handler: this.handleGetVpnKey.bind(this) },
      { action: 'get_smartTv_file', handler: this.handleGetSmartTvFile.bind(this) },
    ];

    this.bot.start((ctx) => this.handleStart(ctx));

    for (const { action, handler } of actions) {
      this.bot.action(action, handler);
    }
  }

  private async handleStart(ctx: Context) {
    await ctx.deleteMessage();
    const userId = ctx.from.id;
    const user = this.prisma.user.findUnique({ where: { telegram_user_id: userId } });
    if (!user) {
      await this.userService.createUser({ telegram_user_id: userId });
    }
    const startText = `–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞–¥–µ–∂–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π VPN –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É, —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤!\\n\\n' +
'üìù –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–ø–∏—Å–∫–∞', —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é –∏–ª–∏ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ –∏ –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN.\\n\\n' +
'üéÅ –ï—Å–ª–∏ —Å –≤–∞–º–∏ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º –∏–ª–∏ –≤—ã —Å–∞–º–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞'.\\n\\n' +
'‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–º–æ—â—å' ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –º—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –Ω–∏—Ö.`;
    await ctx.reply(
      startText,
      Markup.inlineKeyboard([
        Markup.button.callback('üìù –ü–æ–¥–ø–∏—Å–∫–∞', 'subscribe'),
        Markup.button.callback('‚ùì –ü–æ–º–æ—â—å', 'help'),
        Markup.button.callback('üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', 'referral'),
      ]),
    );
  }

  private async handleGetKey(ctx: Context) {
    await ctx.deleteMessage();
    const userId = ctx.from.id;
    const user = await this.prisma.user.findUnique({ where: { telegram_user_id: userId } });
    const vpnKey = await this.prisma.vpn_keys.findFirst({ where: { user_id: user.id, is_active: true } });
    const region = await this.prisma.region.findUnique({ where: { id: vpnKey.region_id } });
    const getKeyText = `–í–∞—à –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á
  –†–µ–≥–∏–æ–Ω - ${region.region_name} ${region.flag}
  
  \`${this.escapeMarkdown(vpnKey.key)}\`
  
  –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ, –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–ª—é—Å–∏–∫ –≤ –≤–µ—Ä—Ö–Ω–µ–º –ø—Ä–∞–≤–æ–º —É–≥–ª—É.
  
  –î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.`;

    await ctx.reply(getKeyText, {
      parse_mode: 'MarkdownV2',
      reply_markup: {
        inline_keyboard: [[Markup.button.callback('üì± –°–∫–∞—á–∞—Ç—å Outline', 'download_outline')]],
      },
    });
  }

  private async handleSubscribe(ctx: Context) {
    await ctx.deleteMessage();
    const user = await this.prisma.user.findUnique({
      where: {
        telegram_user_id: ctx.from.id,
      },
    });

    if (user) {
      const subscription = await this.prisma.subscription.findUnique({
        where: {
          user_id: user.id,
        },
      });

      if (subscription) {
        const today = new Date();
        const subscriptionEnd = subscription.subscription_end.toISOString().split('T')[0];
        const diffInTime = subscription.subscription_end.getTime() - today.getTime();
        const days_left = Math.ceil(diffInTime / (1000 * 60 * 60 * 24));
        const activeSubMenuText = `
  üóìÔ∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ ${subscriptionEnd}.

  –û—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª-–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: ${days_left} –¥–Ω–µ–π.

  üîë –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ ¬´–ì–µ—Ä–º–∞–Ω–∏—è¬ª, 
  –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á'.

  üåç –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–ª—é—á –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å 
  –∫–Ω–æ–ø–∫–æ–π '–í—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω'.

  üîô –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
`;
        await ctx.reply(
          activeSubMenuText,
          Markup.inlineKeyboard([
            Markup.button.callback('üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'extend_subscription'),
            Markup.button.callback('üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á', 'get_key'),
            Markup.button.callback('üåç –í—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω', 'select_region'),
            Markup.button.callback('üì∫ –ö–ª—é—á –¥–ª—è –°–º–∞—Ä—Ç –¢–í', 'smart_tv_key'),
            Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'smart_tv_key'),
          ]),
        );
      } else {
        const newSubMenuText = `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–ª—é—á—É.
        
                       –ï—Å–ª–∏ —Å –≤–∞–º–∏ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏,
                       –ø–µ—Ä–µ–π–¥—è –≤ —Ä–∞–∑–¥–µ–ª '–£–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥'`;
        await ctx.reply(
          newSubMenuText,
          Markup.inlineKeyboard([
            Markup.button.callback('üìù –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'extend_subscription'),
            Markup.button.callback('üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á', 'get_key'),
            Markup.button.callback('üåç –í—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω', 'select_region'),
            Markup.button.callback('üì∫ –ö–ª—é—á –¥–ª—è –°–º–∞—Ä—Ç –¢–í', 'smart_tv_key'),
            Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'smart_tv_key'),
          ]),
        );
      }
    } else {
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º telegram_id –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  }

  private async handleHelp(ctx: Context) {
    await ctx.deleteMessage();
    const helpText =
      '–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º–∏ VPN-–ø–æ–¥–ø–∏—Å–∫–∞–º–∏.\n\n' +
      'üìù –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –∫–Ω–æ–ø–∫–µ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"\n\n' +
      '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n\n' +
      'üîÑ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: –î–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ü–æ–¥–ø–∏—Å–∫–∞" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è.\n\n' +
      'üåç –°–º–µ–Ω–∞ —Ä–µ–≥–∏–æ–Ω–∞ VPN: –í—ã –º–æ–∂–µ—Ç–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –º–µ–Ω—è—Ç—å —Ä–µ–≥–∏–æ–Ω, –ø–µ—Ä–µ–π–¥—è –≤ —Ä–∞–∑–¥–µ–ª "–ü–æ–¥–ø–∏—Å–∫–∞" –∏ –≤—ã–±—Ä–∞–≤ "–í—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω". –†–µ–≥–∏–æ–Ω–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —è–≤–ª—è–µ—Ç—Å—è –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã.\n\n' +
      'üîë –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω –∫–ª—é—á –¥–ª—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ü–æ–¥–ø–∏—Å–∫–∏" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á".\n\n' +
      'üéÅ –ë–æ–Ω—É—Å—ã –¥–ª—è –≤–∞—Å –∏ –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π: –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º, –ø–µ—Ä–µ–π–¥—è –≤ —Ä–∞–∑–¥–µ–ª "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", –∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞.\n\n' +
      'üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "FAQ" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤.\n\n' +
      'ü§ñ –ü–æ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É: @Slivki_VPN_support';
    await ctx.reply(
      helpText,
      Markup.inlineKeyboard([
        Markup.button.callback('üí¨ FAQ', 'https://telegra.ph/CHasto-zadavaemye-voprosy-09-24-4'),
        Markup.button.callback('üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', 'https://telegra.ph/Instrukciya-po-oformleniyu-podpiski-09-24'),
        Markup.button.callback(
          'üì∫ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –°–º–∞—Ä—Ç –¢–í',
          'https://telegra.ph/Instrukciya-po-ustanovke-Slivki-VPN-na-Smart-TV-09-24',
        ),
        Markup.button.callback('üì± –°–∫–∞—á–∞—Ç—å Outline', 'download_outline'),
      ]),
    );
  }

  private async handleChangeRegion(ctx: Context) {
    await ctx.deleteMessage();
    const regions = await this.prisma.region.findMany();
    await ctx.reply(
      '–í—ã–±–µ—Ä–µ—Ç–µ —Ä–µ–≥–∏–æ–Ω:',
      Markup.inlineKeyboard(
        regions.map((region) =>
          Markup.button.callback(`${region.flag} ${region.region_name}`, `get_vpn_key:${region.id}`),
        ),
      ),
    );
  }

  private async handleGetVpnKey(ctx: Context) {
    await ctx.deleteMessage();
    const region = await this.getRegion(ctx);
    const regionId = region.id;
    const userId = ctx.from.id;
    const vpnKey = await this.prisma.vpn_keys.findFirst({
      where: {
        user_id: userId,
        region_id: regionId,
      },
    });
    await ctx.reply(
      `–í–∞—à –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á
  –†–µ–≥–∏–æ–Ω - ${this.escapeMarkdown(region.region_name)} ${region.flag}

\`${this.escapeMarkdown(vpnKey.key)}\`

  –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ, 
  –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–ª—é—Å–∏–∫ –≤ –≤–µ—Ä—Ö–Ω–µ–º –ø—Ä–∞–≤–æ–º —É–≥–ª—É\\.

  –î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\\.`,
      {
        parse_mode: 'MarkdownV2',
        reply_markup: {
          inline_keyboard: [[Markup.button.callback('üì± –°–∫–∞—á–∞—Ç—å Outline', 'download_outline')]],
        },
      },
    );
  }

  private async handleDownloadOutline(ctx: Context) {
    await ctx.deleteMessage();
    await ctx.reply(
      '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Outline:',
      Markup.inlineKeyboard([
        Markup.button.callback('üñ•Ô∏è PC (Mac/Windows/Linux)', 'outline_PC'),
        Markup.button.callback('üì± Android/iOS', 'outline_Mobile'),
      ]),
    );
  }

  private async handleOutlineMobile(ctx: Context) {
    await ctx.deleteMessage();
    await ctx.reply(
      '',
      Markup.inlineKeyboard([
        Markup.button.callback(
          'ü§ñ Android',
          'https://play.google.com/store/apps/details?id=org.outline.android.client',
        ),
        Markup.button.callback('üçé iOS', 'https://itunes.apple.com/app/outline-app/id1356177741'),
      ]),
    );
  }

  private async handleOutlinePC(ctx: Context) {
    await ctx.deleteMessage();
    await ctx.reply(
      '',
      Markup.inlineKeyboard([
        Markup.button.callback('üçé Mac', 'https://itunes.apple.com/app/outline-app/id1356178125'),
        Markup.button.callback(
          'ü™ü Windows',
          'https://s3.amazonaws.com/outline-releases/client/windows/stable/Outline-Client.exe',
        ),
        Markup.button.callback(
          'üêß Linux',
          'https://s3.amazonaws.com/outline-releases/client/linux/stable/Outline-Client.AppImage',
        ),
      ]),
    );
  }

  private async handleSmartTvRegion(ctx: Context) {
    await ctx.deleteMessage();
    const regions = await this.prisma.region.findMany();
    await ctx.reply(
      'üåç–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:',
      Markup.inlineKeyboard(
        regions.map((region) =>
          Markup.button.callback(`${region.flag} ${region.region_name}`, `get_smartTv_file:${region.id}`),
        ),
      ),
    );
  }

  private async handleGetSmartTvFile(ctx: Context) {
    await ctx.deleteMessage();
    const userId = ctx.from.id;
    const user = await this.prisma.user.findUnique({ where: { telegram_user_id: userId } });
    const region = await this.getRegion(ctx);
    if (!region) {
      await ctx.reply('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞');
      return;
    }
    const smartTvVpnKey = await this.prisma.vpn_keys.findFirst({
      where: {
        user_id: user.id,
        region_id: region.id,
      },
    });
    const filePath = await this.botUtils.convertOutlineToJson(smartTvVpnKey.key, user.id);
    const smartTvFileText = `–í–∞—à –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á
          –†–µ–≥–∏–æ–Ω - ${region.region_name} ${region.flag}
          
          –û–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ñ–∞–π–ª–µ
          
          –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–π —Ç–µ–ª–µ–≤–∏–∑–æ—Ä –ø–æ –º–∞–∫—Å–∏–º—É–º—É!`;
    try {
      await ctx.reply(
        smartTvFileText,
        Markup.inlineKeyboard([
          Markup.button.callback(
            'üì∫ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è',
            'https://telegra.ph/Instrukciya-po-ustanovke-Slivki-VPN-na-Smart-TV-09-24',
          ),
        ]),
      );
      await ctx.replyWithDocument({ source: filePath }, { caption: '–í–∞—à Smart TV VPN –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON' });

      if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
        console.log(`–§–∞–π–ª ${filePath} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  }
}
