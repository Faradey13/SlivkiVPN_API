// import { Injectable } from '@nestjs/common';
// import { Action, Ctx, InjectBot, Start, Update } from 'nestjs-telegraf';
// import { Context, Markup, Telegraf } from 'telegraf';
// import { PrismaService } from '../prisma/prisma.service';
// import { UserService } from '../user/user.service';
// import { TelegramBotUtils } from './telegram-bot.utils';
// import * as fs from 'node:fs';
// import { SubscriptionService } from '../subscription/subscription.service';
// import { PaymentService } from '../payment/payment.service';
// import { OutlineVpnService } from '../outline-vpn/outline-vpn.service';
// import { v4 as uuidv4 } from 'uuid';
// import { ReferralService } from '../referral/referral.service';

// @Update()
// @Injectable()
// export class TelegramBotService {
//   constructor(
//     @InjectBot() private readonly bot: Telegraf<Context>,
//     private readonly prisma: PrismaService,
//     private readonly paymentService: PaymentService,
//     private readonly userService: UserService,
//     private readonly botUtils: TelegramBotUtils,
//     private readonly subscriptionService: SubscriptionService,
//     private readonly outline: OutlineVpnService,
//     private readonly referral: ReferralService,
//   ) {}
//
//   @Start()
//   @Action('back_to_menu')
//   async handleStart(@Ctx() ctx: Context) {
//     const userId = ctx.from.id;
//     const nameTg = ctx.from.username;
//     const user = await this.userService.getUserByTgId(userId);
//
//     if (!user) {
//       const newUser = await this.userService.createUser({ telegram_user_id: userId });
//       await this.prisma.user.update({ where: { id: newUser.id }, data: { is_activated: true, telegram_name: nameTg } });
//       await this.outline.createSetKeys(newUser.id);
//     }
//
//     const startText = `
// –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞–¥–µ–∂–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π VPN –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É, —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤!
//
// üìù –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–ø–∏—Å–∫–∞", —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é –∏–ª–∏ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ –∏ –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN.
//
// üéÅ –ï—Å–ª–∏ —Å –≤–∞–º–∏ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º –∏–ª–∏ –≤—ã —Å–∞–º–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞".
//
// ‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–º–æ—â—å" ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –º—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –Ω–∏—Ö.
//     `;
//
//     const keyboard = Markup.inlineKeyboard([
//       [Markup.button.callback('üìù –ü–æ–¥–ø–∏—Å–∫–∞', 'subscribe')],
//       [Markup.button.callback('‚ùì –ü–æ–º–æ—â—å', 'help')],
//       [Markup.button.callback('üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', 'referral')],
//     ]);
//
//     try {
//       await ctx.editMessageText(startText, keyboard);
//     } catch {
//       await ctx.reply(startText, keyboard);
//     }
//   }
//
//   @Action('subscribe')
//   async handleSubscribe(@Ctx() ctx: Context) {
//     const user = await this.userService.getUserByTgId(ctx.from.id);
//
//     if (!user) {
//       console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º telegram_id –Ω–µ –Ω–∞–π–¥–µ–Ω');
//       return;
//     }
//
//     const subscription = await this.prisma.subscription.findUnique({
//       where: { user_id: user.id },
//     });
//
//     if (subscription) {
//       const today = new Date();
//       const subscriptionEnd = subscription.subscription_end.toISOString().split('T')[0];
//       const diffInTime = subscription.subscription_end.getTime() - today.getTime();
//       const days_left = Math.ceil(diffInTime / (1000 * 60 * 60 * 24));
//
//       const activeSubMenuText = `
// üóì –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ ${subscriptionEnd}.
//
// –û—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª-–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: ${days_left} –¥–Ω–µ–π.
//
// üîë –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ ¬´–ì–µ—Ä–º–∞–Ω–∏—è¬ª,
// –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á'.
//
// üåç –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–ª—é—á –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å
// –∫–Ω–æ–ø–∫–æ–π '–í—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω'.
//
// üîô –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
//       `;
//
//       const keyboard = Markup.inlineKeyboard([
//         [Markup.button.callback('üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'extend_subscription')],
//         [Markup.button.callback('üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á', 'get_key')],
//         [Markup.button.callback('üåç –í—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω', 'select_region')],
//         [Markup.button.callback('üì∫ –ö–ª—é—á –¥–ª—è –°–º–∞—Ä—Ç –¢–í', 'smart_tv_key')],
//         [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')],
//       ]);
//
//       await ctx.editMessageText(activeSubMenuText, keyboard);
//     } else {
//       const newSubMenuText = `
// –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–ª—é—á—É.
//
// –ï—Å–ª–∏ —Å –≤–∞–º–∏ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏,
// –ø–µ—Ä–µ–π–¥—è –≤ —Ä–∞–∑–¥–µ–ª '–£–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥'
//       `;
//
//       const keyboard = Markup.inlineKeyboard([
//         [Markup.button.callback('üìù –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'extend_subscription')],
//         [Markup.button.callback('üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á', 'get_key')],
//         [Markup.button.callback('üåç –í—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω', 'select_region')],
//         [Markup.button.callback('üì∫ –ö–ª—é—á –¥–ª—è –°–º–∞—Ä—Ç –¢–í', 'smart_tv_key')],
//         [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')],
//       ]);
//
//       await ctx.editMessageText(newSubMenuText, keyboard);
//     }
//   }
//
//   @Action('extend_subscription')
//   async handleExtendSubscription(@Ctx() ctx: Context) {
//     const user = await this.userService.getUserByTgId(ctx.from.id);
//     const isFree = await this.prisma.free_subscription.findUnique({
//       where: { user_id: user.id },
//     });
//     const subscriptionPlansFree = await this.subscriptionService.getAvailablePlans(isFree.isAvailable);
//     const subscriptionPlansNoFree = await this.subscriptionService.getAvailablePlans(!isFree.isAvailable);
//     const subscriptionPlans = [...subscriptionPlansFree, ...subscriptionPlansNoFree];
//     const subscription = await this.prisma.subscription.findUnique({
//       where: { user_id: user.id },
//     });
//
//     const discount = await this.paymentService.getCurrentPromoCode(user.id);
//     const buttons = subscriptionPlans.map((plan) => [
//       Markup.button.callback(
//         `${plan.name}-${this.paymentService.applyDiscount(plan.price, !plan.isFree ? discount.discount : 0)}‚ÇΩ`,
//         `payment:${plan.id}`,
//       ),
//     ]);
//
//     buttons.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'subscribe')]);
//     buttons.push([Markup.button.callback('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è', 'warning_test')]);
//     const keyboard = Markup.inlineKeyboard(buttons);
//
//     const message =
//       subscription?.subscription_status === true ? '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:' : '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:';
//
//     await ctx.editMessageText(message, keyboard);
//   }
//
//   @Action(/^payment:(\d+)$/)
//   private async handlePayment(ctx: Context) {
//     if (!ctx.callbackQuery || !('data' in ctx.callbackQuery)) {
//       return;
//     }
//     const callbackData = ctx.callbackQuery.data as string;
//     const planId = parseInt(callbackData.split(':')[1]);
//     console.log('plan', planId);
//     const user = await this.userService.getUserByTgId(ctx.from.id);
//     const plan = await this.prisma.subscription_plan.findUnique({ where: { id: planId } });
//     const discount = await this.paymentService.getCurrentPromoCode(user.id);
//     const amount = this.paymentService.applyDiscount(plan.price, plan.isFree ? 0 : discount.discount);
//     const text = `–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ ${plan.name} –∑–∞ ${amount}‚ÇΩ.
//
//       –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç–∏—Ç—å, —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –æ–ø–ª–∞—Ç–µ.`;
//     const keyboard = Markup.inlineKeyboard([
//       [
//         // Markup.button.callback(
//         //   '–û–ø–ª–∞—Ç–∏—Ç—å',
//         //   await this.paymentService.createPayment({ planId: planId, userId: user.id }),
//         // ),
//         Markup.button.callback('–û–ø–ª–∞—Ç–∏—Ç—å', `test_pay:${plan.id}`),
//       ],
//       [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'subscribe')],
//       [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')],
//     ]);
//
//     await ctx.editMessageText(text, keyboard);
//   }
//
//   @Action('get_key')
//   async handleGetKey(@Ctx() ctx: Context) {
//     const user = await this.userService.getUserByTgId(ctx.from.id);
//     const vpnKey = await this.prisma.vpn_keys.findFirst({
//       where: { user_id: user.id, is_active: true },
//     });
//     const region = await this.prisma.region.findUnique({
//       where: { id: vpnKey.region_id },
//     });
//
//     const text = `
// –í–∞—à –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á
// –†–µ–≥–∏–æ–Ω - ${region.region_name} ${region.flag}
//
//  <code><a href="tg://copy?text=${vpnKey.key}">${vpnKey.key}</a></code>
//
// –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ, –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–ª—é—Å–∏–∫ –≤ –≤–µ—Ä—Ö–Ω–µ–º –ø—Ä–∞–≤–æ–º —É–≥–ª—É.
//
// –î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
//     `;
//
//     const keyboard = {
//       inline_keyboard: [
//         [Markup.button.callback('üì± –°–∫–∞—á–∞—Ç—å Outline', 'download_outline')],
//         [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')],
//       ],
//     };
//
//     await ctx.editMessageText(text, {
//       parse_mode: 'HTML',
//       reply_markup: keyboard,
//     });
//   }
//
//   @Action('select_region')
//   async handleChangeRegion(@Ctx() ctx: Context) {
//     const regions = await this.prisma.region.findMany();
//     const buttons = regions.map((region) =>
//       Markup.button.callback(`${region.flag} ${region.region_name}`, `get_vpn_key:${region.id}`),
//     );
//     buttons.push(Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'subscribe'));
//     const groupedButtons = this.botUtils.chunkArray(buttons, 1);
//     const keyboard = Markup.inlineKeyboard(groupedButtons);
//     await ctx.editMessageText('–í—ã–±–µ—Ä–µ—Ç–µ —Ä–µ–≥–∏–æ–Ω:', keyboard);
//   }
//
//   @Action('smart_tv_key')
//   async handleSmartTvRegion(@Ctx() ctx: Context) {
//     const regions = await this.prisma.region.findMany();
//     const buttons = regions.map((region) =>
//       Markup.button.callback(`${region.flag} ${region.region_name}`, `get_smartTv_file:${region.id}`),
//     );
//     buttons.push(Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'subscribe'));
//     const groupedButtons = this.botUtils.chunkArray(buttons, 1);
//     const keyboard = Markup.inlineKeyboard(groupedButtons);
//     await ctx.editMessageText('üåç–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', keyboard);
//   }
//
//   @Action(/^get_smartTv_file:(\d+)$/)
//   async handleGetSmartTvFile(@Ctx() ctx: Context) {
//     const user = await this.userService.getUserByTgId(ctx.from.id);
//     const region = await this.botUtils.getRegion(ctx);
//
//     if (!region) {
//       await ctx.editMessageText('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞');
//       return;
//     }
//
//     const smartTvVpnKey = await this.prisma.vpn_keys.findFirst({
//       where: {
//         user_id: user.id,
//         region_id: region.id,
//       },
//     });
//
//     if (!smartTvVpnKey) {
//       await ctx.editMessageText('–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
//       return;
//     }
//
//     const filePath = await this.botUtils.convertOutlineToJson(smartTvVpnKey.key, user.id);
//
//     if (!fs.existsSync(filePath)) {
//       await ctx.editMessageText('–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
//       return;
//     }
//     const text = `
// –í–∞—à –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á
// –†–µ–≥–∏–æ–Ω - ${region.region_name} ${region.flag}
//
// –û–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ñ–∞–π–ª–µ
//
// –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–π —Ç–µ–ª–µ–≤–∏–∑–æ—Ä –ø–æ –º–∞–∫—Å–∏–º—É–º—É!
//   `;
//
//     try {
//       const keyboard = Markup.inlineKeyboard([
//         [
//           Markup.button.url(
//             'üì∫ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è',
//             'https://telegra.ph/Instrukciya-po-ustanovke-Slivki-VPN-na-Smart-TV-09-24',
//           ),
//         ],
//         [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'get_smartTv_file')],
//         [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')],
//       ]);
//
//       await ctx.editMessageText(text, keyboard);
//       await ctx.replyWithDocument({ source: filePath }, { caption: '–í–∞—à Smart TV VPN –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON' });
//
//       if (fs.existsSync(filePath)) {
//         fs.unlinkSync(filePath);
//       }
//     } catch (error) {
//       console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', error);
//       await ctx.editMessageText('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
//     }
//   }
//
//   @Action('referral')
//   async handleReferral(@Ctx() ctx: Context) {
//     const user = await this.userService.getUserByTgId(ctx.from.id);
//     const refUser = await this.prisma.referral_user.findUnique({
//       where: { user_id: user.id },
//     });
//
//     const text = `
// ‚úÖ –í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥, –µ—Å–ª–∏ –æ–Ω —É –≤–∞—Å –µ—Å—Ç—å, –∏–ª–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
// —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–º —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –∑–Ω–∞–∫–æ–º—ã–º–∏.
//
// üí∏ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ñ–æ—Ä–º–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–µ—Å—è—Ü –∏–ª–∏ –±–æ–ª–µ–µ, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ
// –æ–¥–∏–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Å—è—Ü, –∞ –≤–∞—à –¥—Ä—É–≥ —Ä–∞–∑–æ–≤—É—é
// —Å–∫–∏–¥–∫—É 50% –Ω–∞ –ª—é–±—É—é –ø–æ–¥–ø–∏—Å–∫—É.
//
// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π: ${refUser.referral_count}
//     `;
//
//     const keyboard = Markup.inlineKeyboard([
//       [Markup.button.callback('‚úçüèª –£–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥', 'enter_ref_code')],
//       [Markup.button.callback('üîó –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥', 'get_ref_code')],
//       [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'subscribe')],
//     ]);
//
//     await ctx.editMessageText(text, keyboard);
//   }
//
//   @Action('enter_ref_code')
//   async handleEnterRefCode(@Ctx() ctx: Context) {
//     const user = await this.userService.getUserByTgId(ctx.from.id);
//     const referralUser = await this.prisma.referral_user.findUnique({
//       where: { user_id: user.id },
//     });
//     const myReferral = await this.prisma.promo_codes.findUnique({
//       where: { id: referralUser.code_in_id },
//     });
//     const keyboard = Markup.inlineKeyboard([
//       [Markup.button.callback('‚úçüèª –£–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥', 'enter_ref_code')],
//       [Markup.button.callback('üîó –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥', 'get_ref_code')],
//       [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')],
//     ]);
//     const keyboardWithSub = Markup.inlineKeyboard([
//       [Markup.button.callback('üìù –ü–æ–¥–ø–∏—Å–∫–∞', 'subscribe')],
//       [Markup.button.callback('üîó –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥', 'get_ref_code')],
//       [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')],
//     ]);
//
//     if (referralUser.code_in_id && !referralUser.isUsed) {
//       await ctx.editMessageText(
//         `–í—ã —É–∂–µ –≤–≤–æ–¥–∏–ª–∏ –∫–æ–¥:\n\n${myReferral.code}\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å–æ —Å–∫–∏–¥–∫–æ–π ${myReferral.discount}%`,
//         keyboardWithSub,
//       );
//       return;
//     }
//     if (referralUser.isUsed) {
//       await ctx.editMessageText(
//         `–í—ã —É–∂–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —Å–∫–∏–¥–∫–æ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É: ${myReferral.code}
//
//       –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å–µ–∑–æ–Ω–Ω—ã–π –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥, –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –≤ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫
//       `,
//         keyboardWithSub,
//       );
//       return;
//     }
//
//     await ctx.editMessageText('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥', keyboard);
//
//     this.bot.hears(/.*/, async (ctx) => {
//       const referralCode = ctx.message.text;
//
//       const response = await this.referral.applyReferralCode(user.id, referralCode);
//       if (response.success) {
//         await ctx.reply(response.message, keyboardWithSub);
//       }
//       await ctx.reply(response.message, keyboard);
//     });
//   }
//
//   @Action('get_ref_code')
//   async handleGetRefCode(@Ctx() ctx: Context) {
//     const user = await this.userService.getUserByTgId(ctx.from.id);
//     const referralUser = await this.prisma.referral_user.findUnique({
//       where: { user_id: user.id },
//     });
//     const myReferralCode = await this.prisma.promo_codes.findUnique({
//       where: { id: referralUser.code_out_id },
//     });
//
//     const text = `–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:
// <code><a href="tg://copy?text=${myReferralCode.code}">${myReferralCode.code}</a></code>
//
// –î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.`;
//
//     const keyboard = {
//       inline_keyboard: [
//         [Markup.button.callback('‚úçüèª –£–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥', 'enter_ref_code')],
//         [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')],
//       ],
//     };
//
//     await ctx.editMessageText(text, {
//       parse_mode: 'HTML',
//       reply_markup: keyboard,
//     });
//   }
//
//   @Action('help')
//   async handleHelp(@Ctx() ctx: Context) {
//     const text = `
// –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º–∏ VPN-–ø–æ–¥–ø–∏—Å–∫–∞–º–∏.
//
// üìù –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –∫–Ω–æ–ø–∫–µ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
//
// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
//
// üîÑ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: –î–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ü–æ–¥–ø–∏—Å–∫–∞" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è.
//
// üåç –°–º–µ–Ω–∞ —Ä–µ–≥–∏–æ–Ω–∞ VPN: –í—ã –º–æ–∂–µ—Ç–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –º–µ–Ω—è—Ç—å —Ä–µ–≥–∏–æ–Ω, –ø–µ—Ä–µ–π–¥—è –≤ —Ä–∞–∑–¥–µ–ª "–ü–æ–¥–ø–∏—Å–∫–∞" –∏ –≤—ã–±—Ä–∞–≤ "–í—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω". –†–µ–≥–∏–æ–Ω–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —è–≤–ª—è–µ—Ç—Å—è –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã.
//
// üîë –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω –∫–ª—é—á –¥–ª—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ü–æ–¥–ø–∏—Å–∫–∏" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á".
//
// üéÅ –ë–æ–Ω—É—Å—ã –¥–ª—è –≤–∞—Å –∏ –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π: –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º, –ø–µ—Ä–µ–π–¥—è –≤ —Ä–∞–∑–¥–µ–ª "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", –∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞.
//
// üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "FAQ" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤.
//
// ü§ñ –ü–æ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É: @Slivki_VPN_support
//     `;
//
//     const keyboard = Markup.inlineKeyboard([
//       [Markup.button.url('üí¨ FAQ', 'https://telegra.ph/CHasto-zadavaemye-voprosy-09-24-4')], // –ò–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ button.url
//       [Markup.button.url('üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', 'https://telegra.ph/Instrukciya-po-oformleniyu-podpiski-09-24')],
//       [
//         Markup.button.url(
//           'üì∫ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –°–º–∞—Ä—Ç –¢–í',
//           'https://telegra.ph/Instrukciya-po-ustanovke-Slivki-VPN-na-Smart-TV-09-24',
//         ),
//       ],
//       [Markup.button.callback('üì± –°–∫–∞—á–∞—Ç—å Outline', 'download_outline')],
//       [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')],
//     ]);
//
//     await ctx.editMessageText(text, keyboard);
//   }
//
//   @Action('download_outline')
//   async handleDownloadOutline(@Ctx() ctx: Context) {
//     const text = '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Outline:';
//     const keyboard = Markup.inlineKeyboard([
//       [Markup.button.callback('üñ• PC (Mac/Windows/Linux)', 'outline_PC')],
//       [Markup.button.callback('üì± Android/iOS', 'outline_Mobile')],
//       [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')],
//     ]);
//
//     await ctx.editMessageText(text, keyboard);
//   }
//
//   @Action('outline_Mobile')
//   async handleOutlineMobile(@Ctx() ctx: Context) {
//     const text = '–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:';
//     const keyboard = Markup.inlineKeyboard([
//       [Markup.button.url('ü§ñ Android', 'https://play.google.com/store/apps/details?id=org.outline.android.client')],
//       [Markup.button.url('üçé iOS', 'https://itunes.apple.com/app/outline-app/id1356177741')],
//     ]);
//     await ctx.editMessageText(text, keyboard);
//   }
//
//   @Action('outline_PC')
//   async handleOutlinePC(@Ctx() ctx: Context) {
//     const text = '–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:';
//     const keyboard = Markup.inlineKeyboard([
//       [Markup.button.url('üçé Mac', 'https://itunes.apple.com/app/outline-app/id1356178125')],
//       [
//         Markup.button.url(
//           'ü™ü Windows',
//           'https://s3.amazonaws.com/outline-releases/client/windows/stable/Outline-Client.exe',
//         ),
//       ],
//       [
//         Markup.button.url(
//           'üêß Linux',
//           'https://s3.amazonaws.com/outline-releases/client/linux/stable/Outline-Client.AppImage',
//         ),
//       ],
//     ]);
//     await ctx.editMessageText(text, keyboard);
//   }
//   @Action('warning_test')
//   async handleWarningTest(@Ctx() ctx: Context) {
//     const user = await this.userService.getUserByTgId(ctx.from.id);
//     await this.subscriptionService.sendEndSubscriptionWarning(user.id);
//     await ctx.editMessageText(
//       '–ø—Ä–µ–ª—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
//       Markup.inlineKeyboard([[Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')]]),
//     );
//   }
//
//   @Action(/^test_pay:(\d+)$/)
//   async handleTestPay(@Ctx() ctx: Context) {
//     if (!ctx.callbackQuery || !('data' in ctx.callbackQuery)) {
//       return;
//     }
//     const callbackData = ctx.callbackQuery.data as string;
//     const planId = parseInt(callbackData.split(':')[1]);
//     const user = await this.userService.getUserByTgId(ctx.from.id);
//     const plan = await this.prisma.subscription_plan.findUnique({ where: { id: planId } });
//     const { discount, codeId, message } = await this.paymentService.getCurrentPromoCode(user.id);
//     const amount = this.paymentService.applyDiscount(plan.price, plan.isFree ? 0 : discount);
//     const paYid = uuidv4();
//     if (message) {
//       await ctx.reply(`${message}`);
//     }
//
//     await this.paymentService.onSuccessPayment({
//       id: '1',
//       status: 'ok',
//       amount: {
//         value: `${amount}`,
//         currency: 'RUB',
//       },
//       income_amount: {
//         value: `${amount}`,
//         currency: 'RUB',
//       },
//       description: 'Test payment',
//       recipient: {
//         account_id: '1234567',
//         gateway_id: '1234567',
//       },
//       payment_method: {
//         type: 'yoo_money',
//         id: paYid,
//         saved: false,
//         status: 'active',
//         title: 'YooMoney wallet 111111111111111',
//         account_number: '111111111111111',
//       },
//       captured_at: new Date().toISOString(),
//       created_at: new Date().toISOString(),
//       test: true,
//       refunded_amount: {
//         value: '0.00',
//         currency: 'RUB',
//       },
//       paid: true,
//       refundable: true,
//       metadata: {
//         user_id: `${user.id}`,
//         promo_id: plan.isFree ? null : `${codeId}`,
//         plan_id: `${plan.id}`,
//       },
//     });
//     await ctx.editMessageText(
//       '–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞',
//       Markup.inlineKeyboard([[Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')]]),
//     );
//   }
// }
